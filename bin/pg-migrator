#!/usr/bin/env node

"use strict";

var fs = require("fs");
var path = require("path");
var colors = require("colors");
let pg = require("pg");

global._ = require("underscore");

var ValidationService = require("../lib/application/service/validation-service");
var messages = require("../lib/infrastructure/messages");
var Persister = require("../lib/infrastructure/persister");

colors.setTheme({
    verbose: "cyan",
    info: "green",
    warn: "yellow",
    error: "red"
});

// First argument : connectionString (mandatory)
// Second argument : target version (optional)
var args = process.argv.slice(2);

// Validation for args
var isValid = new ValidationService(messages).validate(args);

if (!isValid) {

    process.exit(1);
}

var connectionString = args[0];
var targetVersion = 0;

// if targetVersion stays 0 means that, target version does not provided by user
// so it will be obtained from script files (the biggest target version number in all files)
if (args.length > 1) {

    targetVersion = args[1];
}

var currentVersion;

var persister = new Persister(pg, connectionString);

// Connecting to PostgreSQL
persister.connect()
    .then(function () {

        return persister.query("BEGIN TRANSACTION");
    })
    .then(function () {

        return getMigrationService(persister).migrate(".", targetVersion);
    })
    .then(function (curVer) {

        currentVersion = curVer;

        // Migration has been completed successfully, committing the transaction
        return persister.query("COMMIT");
    })
    .then(function () {

        persister.closeConnection();

        console.log("--------------------------------------------------".grey);
        console.log((messages.MIGRATION_COMPLETED + currentVersion).info);

        process.exit(0);
    })
    .catch(function (error) {

        // Migration failed

        if (error) {

            console.error((messages.MIGRATION_ERROR + error).error);
        }

        persister.closeConnection();

        process.exit(1);
    });

var getMigrationService = function (persister) {

    var MigratiorService = require("../lib/application/service/migrator-service");
    var ScriptService = require("../lib/domain/service/script-service");
    var VersionService = require("../lib/domain/service/version-service");
    var ScriptRepository = require("../lib/domain/repository/script-repository");
    var VersionRepository = require("../lib/domain/repository/version-repository");


    // Service definition with dependency injection
    return new MigratiorService(
        new ScriptService(new ScriptRepository(fs, persister), path),
        new VersionService(new VersionRepository(persister), messages),
        messages);
};